name: cibuildwheel

on:
  workflow_dispatch:

env:
  PYICU_TAG: v2.14
  ICU_VERSION: 76
  ICU_RELEASE: 76-1/icu4c-76_1
  # CIBW_TEST_REQUIRES: pytest six
  # CIBW_TEST_COMMAND: pytest {project}/test
  CIBW_SKIP: "pp* cp36*"
  CIBW_TEST_SKIP: "*-*"

jobs:
  generate-wheels-matrix:
    # Create a matrix of all architectures & versions to build.
    # This enables the next step to run cibuildwheel in parallel.
    # From https://iscinumpy.dev/post/cibuildwheel-2-10-0/#only-210
    name: Generate wheels matrix
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v4
      - name: Install cibuildwheel
        # Nb. keep cibuildwheel version pin consistent with job below
        run: pipx install cibuildwheel==2.21.3
      - id: set-matrix
        run: |
          MATRIX=$(
            {
              cibuildwheel --print-build-identifiers --platform linux \
              | jq -nRc '{"only": inputs, "os": "ubuntu-latest"}' \
              && cibuildwheel --print-build-identifiers --platform macos \
              | jq -nRc '{"only": inputs, "os": "macos-latest"}' \
              && cibuildwheel --print-build-identifiers --platform windows \
              | jq -nRc '{"only": inputs, "os": "windows-2019"}'
            } | jq -sc
          )
          echo "include=$MATRIX"
          echo "include=$MATRIX" >> $GITHUB_OUTPUT

  build_wheels:
    name: Build for ${{ matrix.only }}
    needs: generate-wheels-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-wheels-matrix.outputs.include) }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Cache [libs]
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        with:
          path: |
            libs/*.xz
            libs/*.gz
            libs/*.zip
          key: libs-${{ runner.os }}-${{ env.PYICU_TAG }}

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        with:
          only: ${{ matrix.only }}

      - name: Build old Linux wheels
        if: contains(matrix.only, '-manylinux_') && startsWith(matrix.only, 'cp36-') && (contains(matrix.only, 'i686') || contains(matrix.only, 'x86_64'))
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_MANYLINUX_i686_IMAGE: manylinux1
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
        with:
          only: ${{ matrix.only }}

      - name: Build faster Linux wheels
        # also build wheels with the most recent manylinux images and gcc
        if: runner.os == 'Linux' && !contains(matrix.only, 'i686')
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_PPC64LE_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_S390X_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_PYPY_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_PYPY_AARCH64_IMAGE: manylinux_2_28
          CIBW_MUSLLINUX_X86_64_IMAGE: musllinux_1_2
          CIBW_MUSLLINUX_AARCH64_IMAGE: musllinux_1_2
          CIBW_MUSLLINUX_PPC64LE_IMAGE: musllinux_1_2
          CIBW_MUSLLINUX_S390X_IMAGE: musllinux_1_2
        with:
          only: ${{ matrix.only }}

      - uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          path: ./wheelhouse/*.whl
          name: pyicu-wheel-${{ matrix.only }}

  # upload_release_assets:
  #   name: Upload Release Assets
  #   needs: [ build_wheels ]
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: write

  #   steps:
  #     - name: Download artifacts
  #       uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
  #       with:
  #         path: ./release_upload
  #         merge-multiple: true

  #     - name: List downloaded artifacts
  #       run: ls -la ./release_upload

  #     - uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
  #       with:
  #         path: ./release_upload/*.whl
  #         name: all_wheels

  #     - name: Release
  #       uses: softprops/action-gh-release@v2
  #       if: github.ref_type == 'tag'
  #       with:
  #         files: |
  #           ./release_upload/*.whl
  #           ./release_upload/*.tar.gz

  release:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    permissions:
      contents: write    

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        
        with:
          path: ./artifacts
          merge-multiple: true
          
      - name: List artifacts
        run: |
          pwd
          echo ${{ github.workspace }}/artifacts
          ls -alh ${{ github.workspace }}
          find .

      - name: make release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ github.event.repository.name }}-${{ github.ref_name }}
          artifacts: "artifacts/*.whl"
          artifactContentType: application/zip
          generateReleaseNotes: false
          makeLatest: true
          allowUpdates: true
          tag: ${{ env.PYICU_TAG }}
        
